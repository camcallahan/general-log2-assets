-- This file has been generated by Dungeon Editor 2.1.9

-- Socketable Gems

defineObject{ name = "socket_gem_chipped_ruby",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/red_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Chipped Ruby",
			gfxIndex = 218,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 2
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}
defineObject{ name = "socket_gem_flawed_ruby",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/red_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Flawed Ruby",
			gfxIndex = 218,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 3
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}
defineObject{ name = "socket_gem_normal_ruby",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/red_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Ruby",
			gfxIndex = 218,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 5
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}
defineObject{ name = "socket_gem_flawless_ruby",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/red_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Flawless Ruby",
			gfxIndex = 218,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
			particleSystem = "power_gem_item",
			name = "particle",
			class = "Particle"
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 8
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}
defineObject{ name = "socket_gem_perfect_ruby",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/red_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Perfect Ruby",
			gfxIndex = 218,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
			particleSystem = "power_gem_item",
			name = "particle",
			class = "Particle"
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 10
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}

defineObject{ name = "socket_gem_chipped_sapphire",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/blue_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Chipped Sapphire",
			gfxIndex = 118,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 2
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}
defineObject{ name = "socket_gem_flawed_sapphire",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/blue_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Flawed Sapphire",
			gfxIndex = 118,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 3
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}
defineObject{ name = "socket_gem_normal_sapphire",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/blue_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Sapphire",
			gfxIndex = 118,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 5
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}
defineObject{ name = "socket_gem_flawless_sapphire",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/blue_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Flawless Sapphire",
			gfxIndex = 118,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
			particleSystem = "power_gem_item",
			name = "particle",
			class = "Particle"
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 8
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}
defineObject{ name = "socket_gem_perfect_sapphire",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/blue_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Perfect Sapphire",
			gfxIndex = 118,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
			particleSystem = "power_gem_item",
			name = "particle",
			class = "Particle"
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 10
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}

defineObject{ name = "socket_gem_chipped_emerald",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/green_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Chipped Emerald",
			gfxIndex = 119,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 2
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}
defineObject{ name = "socket_gem_flawed_emerald",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/blue_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Flawed Emerald",
			gfxIndex = 119,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 3
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}
defineObject{ name = "socket_gem_normal_emerald",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/green_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Emerald",
			gfxIndex = 119,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 5
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}
defineObject{ name = "socket_gem_flawless_emerald",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/green_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Flawless Emerald",
			gfxIndex = 119,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
			particleSystem = "power_gem_item",
			name = "particle",
			class = "Particle"
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 8
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}
defineObject{ name = "socket_gem_perfect_emerald",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/green_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Perfect Emerald",
			gfxIndex = 119,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
			particleSystem = "power_gem_item",
			name = "particle",
			class = "Particle"
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 10
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}

defineObject{ name = "socket_gem_chipped_topaz",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/green_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Chipped Topaz",
			gfxIndex = 119,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 2
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}
defineObject{ name = "socket_gem_flawed_topaz",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/blue_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Flawed Topaz",
			gfxIndex = 119,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 3
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}
defineObject{ name = "socket_gem_normal_topaz",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/green_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Topaz",
			gfxIndex = 119,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 5
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}
defineObject{ name = "socket_gem_flawless_topaz",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/green_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Flawless Topaz",
			gfxIndex = 119,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
			particleSystem = "power_gem_item",
			name = "particle",
			class = "Particle"
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 8
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}
defineObject{ name = "socket_gem_perfect_topaz",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/green_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Perfect Topaz",
			gfxIndex = 119,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
			particleSystem = "power_gem_item",
			name = "particle",
			class = "Particle"
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 10
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}

defineObject{ name = "socket_gem_chipped_amethyst",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/green_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Chipped Amethyst",
			gfxIndex = 119,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 2
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}
defineObject{ name = "socket_gem_flawed_amethyst",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/green_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Flawed Amethyst",
			gfxIndex = 119,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 3
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}
defineObject{ name = "socket_gem_normal_amethyst",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/green_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Amethyst",
			gfxIndex = 119,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 5
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}
defineObject{ name = "socket_gem_flawed_amethyst",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/green_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Flawed Amethyst",
			gfxIndex = 119,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
			particleSystem = "power_gem_item",
			name = "particle",
			class = "Particle"
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 8
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}
defineObject{ name = "socket_gem_perfect_amethyst",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/green_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Perfect Amethyst",
			gfxIndex = 119,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
			particleSystem = "power_gem_item",
			name = "particle",
			class = "Particle"
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 10
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}

defineObject{ name = "socket_gem_chipped_diamond",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/green_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Chipped Diamond",
			gfxIndex = 119,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 2
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}
defineObject{ name = "socket_gem_flawed_diamond",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/green_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Flawed Diamond",
			gfxIndex = 119,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 3
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}
defineObject{ name = "socket_gem_normal_diamond",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/green_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Diamond",
			gfxIndex = 119,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 5
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}
defineObject{ name = "socket_gem_flawless_diamond",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/green_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Flawless Diamond",
			gfxIndex = 119,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
			particleSystem = "power_gem_item",
			name = "particle",
			class = "Particle"
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 8
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}
defineObject{ name = "socket_gem_perfect_diamond",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/green_gem.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Perfect Diamond",
			gfxIndex = 119,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
		},
		{
			particleSystem = "power_gem_item",
			name = "particle",
			class = "Particle"
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 10
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}


defineObject{ name = "socket_skull_chipped_heavy_weapons",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/skull.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Skull (minor)",
			gfxIndex = 31,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
			description = "The skull of a once strong creature.",
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 6
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}
defineObject{ name = "socket_skull_chipped_light_weapons",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/skull.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Skull (minor)",
			gfxAtlas = "mod_assets/textures/akroma_icons5.dds",
			gfxIndex = 31,
			--gfxIndex = 31,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
			description = "The skull of a once nimble creature.",
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 6
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}
defineObject{ name = "socket_skull_chipped_concentration",
	baseObject = "base_item",
	tags = { "socketSystem", "socket_gem", "item", },
	components = {
		{
			model = "assets/models/items/skull.fbx",
			name = "model",
			class = "Model"
		},
		{
			weight = 0.2,
			uiName = "Skull (minor)",
			gfxAtlas = "mod_assets/textures/akroma_icons9.dds",
			gfxIndex = 3,
			--gfxIndex = 31,
			class = "Item",
			name = "item",
			gameEffect = "This gem can fit into certain types of items. Use it in your hand along with the item to enchant in the other.",
			description = "The skull of a once magical being.",
		},
		{
		class = "Counter",
		name = "treasureclass",
		value = 6
		},
		{ 
		class = "UsableItem",
		onUseItem = function(self, champion)
			local slotW = champion:getItem(ItemSlot.Weapon)
			local slotO = champion:getItem(ItemSlot.OffHand)
			if slotW == nil or slotO == nil then return false end
			if slotW.go.id ~= self.go.id and slotO.go.id ~= self.go.id then return false end
			local itemToEnchant = slotW
			if itemToEnchant == nil then itemToEnchant = "" end
			if itemToEnchant.go.id == self.go.id then
				itemToEnchant = slotO
			end	
		
		
			if itemToEnchant:hasTrait("shield") then
				return socketSystem.script.enchantShield(self, itemToEnchant)
			elseif itemToEnchant:hasTrait("chest_armor") then
				return socketSystem.script.enchantArmor(self, itemToEnchant)
			elseif (itemToEnchant.go:getComponent("meleeattack") or itemToEnchant.go:getComponent("rangedattack") or itemToEnchant.go:getComponent("firearmattack")) then
				return socketSystem.script.enchantWeapon(self, itemToEnchant)
			end
			return false
		end,
		}
	}
}

